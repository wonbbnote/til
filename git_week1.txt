
1. 앞으로 git 프로젝트로 만들고 싶은 것
- 데이터 분석 관련 자료 모으고 인사이트 정리
- 개발 꾸준히 해서 나만의 로직 생성하기

2. 1주차 주요 개념 키워드
깃은 대표적인 버전 관리도구
파일의 버전을 일일히 저장하지 않고 현재 상태 프로젝트만 저장해도 그동안의 프로젝트 상태 변화(누가, 언제, 현재 프로젝트 상태)를 알 수 있다! 

1) commit (커밋)
*현재 프로젝트 상태를 저장한 것
(1) 소스트리에서 로컬저장소 추가 -> .git 폴더 생성
(2) 첫 커밋하기: 소스트리 "파일 상태"에서 저장한 파일 +하고 커밋 메시지 작성 -> 히스토리에 추가됨
(3) 수정한 후 다시 커밋하기 (파일 상태에서 변경 내용 알 수 있음) -> 히스토리에 변경내용 알 수 있음
(4) 여러가지 파일 수정 - 별다른것 없음(파일 상태에서 +누르고 커밋메시지 작성), 단 커밋메시지 한꺼번에 할 수도 있지만 작성 단위별로 작성하는 것이 더 좋을 것
*여러가지 파일이 있는데 일부만 수정한 경우, 일부만 보이게 해서 커밋하기 편리
(5) 두가지 파일을 수정하고 그중 하나만 커밋하는 경우 (애드add, 스테이징staging)

2) 원격repo 사용 -깃헙
*깃으로 원격repo와 로컬repo가 연결(브랜치 트래킹)된 것처럼 사용할 수 있음
*로컬repo는 내가 어떤 원격repo와 연결되어 있는지 정보를 가짐(원격 repo는 정보x) -> 로컬기준으로 동작 이해(push/pull)*보통 수동으로 연결
*원격repo에 있는 프로젝트를 로컬 repo로 다운로드하는 개념: clone(클론, 복제)
(1) 원격repo 만들기 - 깃헙 사이트에서 new버튼(Create new repository)
(2) 소스트리에서 연결하기 -> 설정 - 원격 - 추가 - 원격repo주소 붙여넣기 (*원격이름은 관행적으로 origin이라 적음) *브랜치 이름을 master -> main으로 바꾸기(왜하는지는 모르겠음)
(3) 로컬repo에 있는 파일 원격repo에 푸시하기 -> 히스토리나 main브랜치 선택 -> 푸시버튼 누르기 -> 푸시? 체크박스 누르고 푸쉬! -> 깃헙 들어가서 확인! -> commits누르면 히스토리 확인가능
(4) 깃헙에서 파일 수정 - 파일 선택하고 펜 아이콘 누르기 -> 수정후 커밋 메시지 작성후 commitchange
(5) 소스트리에서 PULL 버튼 누르기
(6) 클론하기 - 원격repo의 파일을 내컴퓨터에 가져올 공간만들기 -> 클론할 리포지토리의 주소 -> 코드 초록색 버튼 HTTPs 복사 -> 소스트리가서 newTab - clone누르고 리포지토리 주소와 저장할 로컬 폴더 지정후 클론!
(7) 원격 repo 깃헙에서 없애는 방법 - 깃헙 페이지 settings - options - DangerZone에 있는 delete this repository - user이름/repository명 형식으로 적고 I understand the consequences 버튼 누르면 삭제됨

*개념지도 그려보기( + 키워드)
*에러노트 사용하기
*충돌에대한 꿀팁확인 (혼자 프로젝트 진행 시 pull ->로컬 repo commit -> push 순서로 하는 것이 충돌 방지에 용이)
